<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd  
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd  
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<import resource="spring-configuration/propertyFileConfigurer.xml" />
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
		<constructor-arg>
			<map>
				<entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
				<entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" />
			</map>
		</constructor-arg>

		<property name="authenticationPolicy">
			<bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
		</property>
		<property name="authenticationMetaDataPopulators">
			<list>
				<bean
					class="org.jasig.cas.authentication.SuccessfulHandlerMetaDataPopulator" />
				<bean
					class="org.jasig.cas.authentication.principal.RememberMeAuthenticationMetaDataPopulator" />
			</list>
		</property>
	</bean>

	<bean id="proxyAuthenticationHandler"
		class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
		p:httpClient-ref="httpClient" />

	<!-- 自定义数据库鉴权 -->
	<!-- <bean id="primaryAuthenticationHandler" class="io.github.howiefh.cas.authentication.ValidUserQueryDBAuthenticationHandler"> 
		<constructor-arg ref="dataSource" index="0"></constructor-arg> <constructor-arg 
		value="${auth.sql}" index="1"></constructor-arg> <constructor-arg value="MD5" 
		index="2"></constructor-arg> </bean> -->

	<!-- 自定义数据库鉴权 -->
	<bean id="primaryAuthenticationHandler"
		class="io.github.howiefh.cas.authentication.ValidUserQueryDBAuthenticationHandler">
		<constructor-arg ref="druidDataSource" index="0"></constructor-arg>
		<constructor-arg value="${auth.sql}" index="1"></constructor-arg>
		<constructor-arg value="${auth.sql_email}" index="2"></constructor-arg>
		<constructor-arg value="${auth.sql_phone}" index="3"></constructor-arg>
		<constructor-arg value="SHA1" index="4"></constructor-arg>
	</bean>





	<!-- 加密 -->
	<!-- <property name="passwordEncoder" ref="myPasswordEncoder" /> -->
	<!-- 密码不加密 -->
	<bean id="myPasswordEncoder"
		class="org.jasig.cas.authentication.handler.PlainTextPasswordEncoder" />


	<!-- 密码加密 -->
	<!-- <bean id="myPasswordEncoder" class="org.jasig.cas.authentication.handler.MyPasswordEncoder"> 
		</bean> -->


	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${dataSource.driver}"></property>
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />

		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="maxWait" value="${dataSource.maxWait}" />
		<property name="minIdle" value="${dataSource.minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testOnReturn" value="${dataSource.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${dataSource.maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${dataSource.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>

	<!-- <bean id="myjdbctemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource"> <ref local="druidDataSource" /> </property> 
		</bean> -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="druidDataSource" />
	</bean>

	<!-- 配置 Spring 使用的数据源 -->
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="dbType" value="sqlserver" />
		<!-- 基本属性配置 -->
		<property name="url" value="${datasource2.url}" />
		<property name="username" value="${datasource2.username}" />
		<property name="password" value="${datasource2.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="10" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- <property name="validationQuery" value="SELECT 'x'" /> <property name="testWhileIdle" 
			value="true" /> <property name="testOnBorrow" value="false" /> <property 
			name="testOnReturn" value="false" /> -->

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 <property name="poolPreparedStatements" 
			value="false" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,wall" />

		<!-- 合并sql -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
	</bean>

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="10000" />
		<property name="logSlowSql" value="true" />
	</bean>
<!--
	<bean id="dataSource_sqlserver" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>com.microsoft.sqlserver.jdbc.SQLServerDriver</value>
		</property>
		<property name="url">
			<value>jdbc:sqlserver://localhost:1433;database=Z_MARK_MANAGE;integratedSecurity=false
			</value>
		</property>
		<property name="username">
			<value>sa</value>
		</property>
		<property name="password">
			<value>wellhope</value>
		</property>
		<property name="validationQuery">
			<value>select count(*) from [Z_MARK_MANAGE].[dbo].[USER_INFO]</value>
		</property>
	</bean>
-->

	<bean id="proxyPrincipalResolver"
		class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

	<bean id="primaryPrincipalResolver"
		class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver">
		<property name="attributeRepository" ref="attributeRepository" />
	</bean>

	<!--修改后 -->
	<bean id="attributeRepository" class="org.jasig.services.persondir.support.AccoutAttributeDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	<!--修改后 end -->
	
	
	<!-- 修改前 -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao"
		p:backingMap-ref="attrRepoBackingMap" />
	<util:map id="attrRepoBackingMap">
		<entry key="uid" value="uid" />
		<entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
		<entry key="groupMembership" value="groupMembership" />
	</util:map>

	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
		p:registeredServices-ref="registeredServicesList" />

	<util:list id="registeredServicesList">
		<!-- 修改前 -->
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" />

		<!-- 修改后 -->
		<bean class="org.jasig.cas.services.RegexRegisteredService" p:id="0"
			p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
			p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001">
			<property name="allowedAttributes">
				<list>
					<value>id</value>
					<value>username</value>
					<value>email</value>
					<value>phonenumber</value>
				</list>
			</property>
		</bean>
		<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="1" />
			<property name="name" value="HTTP and IMAP on example.com" />
			<property name="description"
				value="Allows HTTP(S) and IMAP(S) protocols 
				on example.com" />
			<property name="serviceId" value="^(https?|imaps?)://.*" />
			<property name="evaluationOrder" value="0" />
			<property name="allowedAttributes">
				<list>
					<value>id</value>
					<value>username</value>
					<value>email</value>
					<value>phonenumber</value>
				</list>
			</property>
		</bean>



		<!-- 支持代理 --><!-- p:enabled=”true” p:allowedToProxy=”true” p:ssoEnabled=”true” -->
		<!-- Use the following definition instead of the above to further restrict 
			access to services within your domain (including sub domains). Note that 
			example.com must be replaced with the domain you wish to permit. This example 
			also demonstrates the configuration of an attribute filter that only allows 
			for attributes whose length is 3. -->
		<!-- <bean class="org.jasig.cas.services.RegexRegisteredService"> <property 
			name="id" value="1" /> <property name="name" value="HTTP and IMAP on example.com" 
			/> <property name="description" value="Allows HTTP(S) and IMAP(S) protocols 
			on example.com" /> <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" 
			/> <property name="evaluationOrder" value="0" /> <property name="attributeFilter"> 
			<bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" 
			c:regex="^\w{3}$" /> </property> </bean> -->
	</util:list>

	<bean id="auditTrailManager"
		class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor"
		p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor"
			p:freeMemoryWarnThreshold="10" />
		<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
			* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
		<bean class="org.jasig.cas.monitor.SessionMonitor"
			p:ticketRegistry-ref="ticketRegistry"
			p:serviceTicketCountWarnThreshold="5000" p:sessionCountWarnThreshold="100000" />
	</util:list>
</beans>  